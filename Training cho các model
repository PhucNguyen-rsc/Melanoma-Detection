# các model Inception V3, EfficientNetB0, VGG16 và ResNet50 đều như nhau, nên ở đây để sẵn 1 ví dụ về mạng VGG16:

model_base_1= tf.keras.applications.VGG16(include_top=False, 
                                                   weights='imagenet', 
                                                   input_shape=(256,256,3))
                                                   
input = tf.keras.layers.Input([None, None, 3], dtype = tf.float32) #đây chỉ là 1 lớp input rỗng
preprocessing = tensorflow.keras.applications.vgg16.preprocess_input(input) #preprocess input 
base = model_base_1 (preprocessing)
glob = GlobalAveragePooling2D() (base)
dense_1 = Dense(1024, activation='relu') (glob) #tùy vào cấu trúc của từng pretrained model
dense_2 = Dense(512, activation='relu' ) (dense_1)
dense_3 = Dense(64, activation='relu' ) (dense_2)
out= Dense(1, activation = 'sigmoid') (dense_3)
model_1 = tf.keras.Model(inputs = [input], outputs= [out])

clear_session()
set_seed(42)
np.random.RandomState(42)

checkpoint_1= ModelCheckpoint("output/kaggle/working/model_1.h5", save_best_only= True)

model_1.compile(optimizer=tf.keras.optimizers.Adam(1e-4), 
                metrics=tf.keras.metrics.AUC(curve= "ROC"), 
                loss=tfa.losses.SigmoidFocalCrossEntropy())
                
model_1.summary()
history_1=model_1.fit(train_generator,
                      validation_data=validation_generator,
                      batch_size=32, 
                      epochs =1000, 
                      verbose=1, 
                      workers=32,
                      max_queue_size=16,
                      use_multiprocessing=True,
                      class_weight= class_weights_dict,
                      callbacks=[stop, checkpoint_1, lr])

#AlexNet tương tự, tuy nhiên phải tự tạo lại chứ không thể import model từ keras.applications (lưu ý phía dưới là cấu trúc AlexNet với nhiều filters hơn với mỗi lớp):
#tái tạo lại base model cho AlexNet:

model_base_6 = Sequential()
model_base_6.add(layers.experimental.preprocessing.Resizing(224, 224, interpolation="bilinear", input_shape=(256,256,3)))
model_base_6.add(layers.Conv2D(96, 11, strides=4, padding='same'))
model_base_6.add(layers.Lambda(tf.nn.local_response_normalization))
model_base_6.add(layers.Activation('relu'))
model_base_6.add(layers.MaxPooling2D(3, strides=2))
model_base_6.add(layers.Conv2D(256, 5, strides=4, padding='same'))
model_base_6.add(layers.Lambda(tf.nn.local_response_normalization))
model_base_6.add(layers.Activation('relu'))
model_base_6.add(layers.MaxPooling2D(3, strides=2))
model_base_6.add(layers.Conv2D(384, 3, strides=4, padding='same'))
model_base_6.add(layers.Activation('relu'))
model_base_6.add(layers.Conv2D(384, 3, strides=4, padding='same'))
model_base_6.add(layers.Activation('relu'))
model_base_6.add(layers.Conv2D(256, 3, strides=4, padding='same'))
model_base_6.add(layers.Activation('relu'))
model_base_6.add(layers.Flatten())
model_base_6.add(layers.Dense(4096, activation='relu'))
model_base_6.add(layers.Dropout(0.5))
model_base_6.add(layers.Dense(4096, activation='relu'))
model_base_6.add(layers.Dropout(0.5))


input_alexnet = tf.keras.layers.Input([None, None, 3], dtype = tf.float32)
preprocessing_alexnet = tf.keras.layers.experimental.preprocessing.Rescaling(scale=1./127.5, offset=-1) (input_alexnet)
base_alexnet= model_base_6 (preprocessing_alexnet)
glob_alexnet = GlobalAveragePooling2D() (base_alexnet)
out_alexnet= Dense(1, activation='sigmoid') (glob_alexnet)

model_alexnet = tf.keras.Model(inputs = [input_alexnet], outputs= [out_alexnet])
